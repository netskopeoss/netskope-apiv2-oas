components:
  parameters:
    FilterOptionsRequestEndtime:
      description: end time query filter in Unix timestamp format, with max time
        range of 48 hours within last 30 days
      in: query
      name: endtime
      required: true
      schema:
        example: 1689577200
        type: integer
    FilterOptionsRequestPrefix:
      description: prefix for filter User/SourceIp/UserLocation...
      in: query
      name: prefix
      schema:
        type: string
    FilterOptionsRequestStarttime:
      description:
        start time query filter in Unix timestamp format, with max time
        range of 48 hours within last 30 days
      in: query
      name: starttime
      required: true
      schema:
        example: 1689490800
        type: integer
    OptionalPaginationParamsLimit:
      description: page limit
      in: query
      name: limit
      schema:
        example: 10
        type: integer
    OptionalPaginationParamsOffset:
      description: page offset
      in: query
      name: offset
      schema:
        example: 20
        type: integer
    OptionalPaginationParamsSortBy:
      description: page sorted by a keyword
      in: query
      name: sortby
      schema:
        enum:
          - expScore
        example: expScore
        type: string
    OptionalPaginationParamsSortOrder:
      description: page sortorder
      in: query
      name: sortorder
      schema:
        enum:
          - asc
          - desc
        example: asc
        type: string
  schemas:
    Application:
      properties:
        appName:
          type: string
        expScore:
          description: optional param for applications in drilldown page
          type: integer
      type: object
    ApplicationDetailsParams:
      properties:
        appName:
          type: string
        deviceId:
          type: string
        user:
          type: string
      required:
        - user
        - deviceId
        - appName
    ApplicationMetricAll:
      properties:
        dnsResolutionTime:
          type: integer
        latency:
          type: integer
        tcpConnectTime:
          type: integer
        timeToFirstByte:
          type: integer
        timeToLastByte:
          type: integer
        timestamp:
          type: integer
        tlsNegotiationTime:
          type: integer
        waitTime:
          type: integer
      type: object
    ApplicationMetricDNSResolution:
      properties:
        dnsResolutionTime:
          type: integer
        timestamp:
          type: integer
      type: object
    ApplicationMetricE2ELatency:
      properties:
        latency:
          type: integer
        timestamp:
          type: integer
      type: object
    ApplicationMetricFirstByte:
      properties:
        timeToFirstByte:
          type: integer
        timestamp:
          type: integer
      type: object
    ApplicationMetricLastByte:
      properties:
        timeToLastByte:
          type: integer
        timestamp:
          type: integer
      type: object
    ApplicationMetricRoundTripTime:
      properties:
        roundTripTime:
          type: integer
        timestamp:
          type: integer
      type: object
    ApplicationMetricTCPConnect:
      properties:
        dnsResolutionTime:
          type: integer
        timestamp:
          type: integer
      type: object
    ApplicationMetricTLSNegotiation:
      properties:
        timestamp:
          type: integer
        tlsNegotiationTime:
          type: integer
      type: object
    ApplicationMetricTypeParam:
      properties:
        metricType:
          enum:
            - all
            - round_trip_time
            - end_to_end_latency
            - time_to_first_byte
            - time_to_last_byte
            - dns_resolution_time
            - tcp_connect_time
            - tls_negotiation_time
            - wait_time
          type: string
      required:
        - metricType
    ApplicationMetricWait:
      properties:
        timestamp:
          type: integer
        waitTime:
          type: integer
      type: object
    ApplicationsResponse:
      properties:
        applications:
          items:
            $ref: "#/components/schemas/Application"
          type: array
        totalCount:
          type: integer
      type: object
    Device:
      properties:
        deviceClassification:
          type: string
        deviceName:
          type: string
      type: object
    DeviceDetailsDrilldownResponse:
      properties:
        clientStatus:
          type: string
        clientVersion:
          type: string
        cpu:
          type: string
        deviceClassification:
          type: string
        deviceName:
          type: string
        deviceOs:
          type: string
        deviceScore:
          type: integer
        gateway:
          type: string
        geo:
          $ref: "#/components/schemas/Geo"
        lastActivity:
          type: integer
        memory:
          type: string
        model:
          type: string
        pop:
          type: string
        privateIp:
          type: string
        publicIp:
          type: string
      type: object
    DeviceDetailsParams:
      properties:
        deviceId:
          type: string
        user:
          type: string
      required:
        - user
        - deviceId
    DeviceDetailsRequest:
      allOf:
        - $ref: "#/components/schemas/RequestBaseTime"
        - $ref: "#/components/schemas/DeviceDetailsParams"
    DeviceDrilldown:
      properties:
        deviceId:
          type: string
        deviceName:
          type: string
        deviceOs:
          type: string
      type: object
    DeviceListRequest:
      allOf:
        - $ref: "#/components/schemas/RequestBaseTime"
        - $ref: "#/components/schemas/RequestBaseUser"
        - properties:
            userLocation:
              items:
                $ref: "#/components/schemas/UserLocationFilter"
              type: array
    DeviceMetricAll:
      properties:
        battery:
          type: integer
        bytesRead:
          type: integer
        bytesReceived:
          type: integer
        bytesSent:
          type: integer
        bytesWritten:
          type: integer
        cpuUsage:
          type: integer
        diskUsage:
          type: integer
        memoryUsage:
          type: integer
        timestamp:
          type: integer
        wifi:
          type: integer
      type: object
    DeviceMetricTypeParam:
      properties:
        metricType:
          enum:
            - all
            - cpu_usage
            - memory
            - disk_usage
            - throughput
            - disk_io
            - battery
            - wifi
          type: string
      required:
        - metricType
    DeviceProcessInfoCPUUsage:
      properties:
        cpuUsage:
          type: integer
        processId:
          type: integer
        processName:
          type: string
        threadCount:
          type: integer
      type: object
    DeviceProcessInfoCPUUsageResponse:
      properties:
        processInfo:
          items:
            $ref: "#/components/schemas/DeviceProcessInfoCPUUsage"
          type: array
        totalCount:
          type: integer
      type: object
    DeviceProcessInfoDiskIOUsage:
      properties:
        bytesRead:
          type: integer
        bytesWritten:
          type: integer
        processId:
          type: integer
        processName:
          type: string
      type: object
    DeviceProcessInfoDiskIOUsageResponse:
      properties:
        processInfo:
          items:
            $ref: "#/components/schemas/DeviceProcessInfoDiskIOUsage"
          type: array
        totalCount:
          type: integer
      type: object
    DeviceProcessInfoMemoryUsage:
      properties:
        memoryUsage:
          type: integer
        processId:
          type: integer
        processName:
          type: string
        threadCount:
          type: integer
      type: object
    DeviceProcessInfoMemoryUsageResponse:
      properties:
        processInfo:
          items:
            $ref: "#/components/schemas/DeviceProcessInfoMemoryUsage"
          type: array
        totalCount:
          type: integer
      type: object
    DeviceProcessInfoResponse:
      properties:
        cpuUsage:
          $ref: "#/components/schemas/DeviceProcessInfoCPUUsageResponse"
        diskIOUsage:
          $ref: "#/components/schemas/DeviceProcessInfoDiskIOUsageResponse"
        memoryUsage:
          $ref: "#/components/schemas/DeviceProcessInfoMemoryUsageResponse"
      type: object
    DeviceTraceroute:
      properties:
        deviceClassification:
          type: string
        deviceName:
          type: string
        geo:
          $ref: "#/components/schemas/Geo"
        model:
          type: string
        privateIp:
          type: string
        publicIp:
          type: string
      type: object
    ErrorResponse:
      properties:
        message:
          description: user facing message for this error
          type: string
      type: object
    Event:
      properties:
        event:
          type: string
        eventType:
          description: network, device
          type: string
        timestamp:
          type: integer
      type: object
    EventTypeParam:
      properties:
        eventType:
          enum:
            - all
            - network
            - device
          type: string
      required:
        - eventType
    ExpScoreMetric:
      properties:
        expScore:
          type: integer
        timestamp:
          type: integer
      type: object
    FilterOptionsRequest:
      allOf:
        - $ref: "#/components/schemas/RequestBaseTime"
        - properties:
            prefix:
              type: string
    FilterOptionsRequestWithUser:
      allOf:
        - $ref: "#/components/schemas/RequestBaseTime"
        - $ref: "#/components/schemas/RequestBaseUser"
        - properties:
            prefix:
              type: string
    Geo:
      properties:
        city:
          type: string
        country:
          type: string
        latitude:
          type: number
        longitude:
          type: number
        region:
          type: string
      type: object
    GlobalFiltersRequest:
      allOf:
        - $ref: "#/components/schemas/RequestBaseTime"
        - $ref: "#/components/schemas/RequestAddedFilters"
    Location:
      properties:
        avgExpScore:
          type: number
        geo:
          $ref: "#/components/schemas/Geo"
        totalUsersCount:
          type: integer
        userCountGoodExp:
          type: integer
        userCountMediumExp:
          type: integer
        userCountPoorExp:
          type: integer
      type: object
    LocationsResponse:
      items:
        $ref: "#/components/schemas/Location"
      type: array
    MetricsApplicationAllResponse:
      items:
        $ref: "#/components/schemas/ApplicationMetricAll"
      type: array
    MetricsApplicationDNSResolutionResponse:
      items:
        $ref: "#/components/schemas/ApplicationMetricDNSResolution"
      type: array
    MetricsApplicationE2ELatencyResponse:
      items:
        $ref: "#/components/schemas/ApplicationMetricE2ELatency"
      type: array
    MetricsApplicationFirstByteResponse:
      items:
        $ref: "#/components/schemas/ApplicationMetricFirstByte"
      type: array
    MetricsApplicationLastByteResponse:
      items:
        $ref: "#/components/schemas/ApplicationMetricLastByte"
      type: array
    MetricsApplicationRoundTripTimeResponse:
      items:
        $ref: "#/components/schemas/ApplicationMetricRoundTripTime"
      type: array
    MetricsApplicationTCPConnectResponse:
      items:
        $ref: "#/components/schemas/ApplicationMetricTCPConnect"
      type: array
    MetricsApplicationTLSNegotiationResponse:
      items:
        $ref: "#/components/schemas/ApplicationMetricTLSNegotiation"
      type: array
    MetricsApplicationWaitResponse:
      items:
        $ref: "#/components/schemas/ApplicationMetricWait"
      type: array
    MetricsDeviceAllResponse:
      items:
        $ref: "#/components/schemas/DeviceMetricAll"
      type: array
    MetricsDeviceBatteryResponse:
      items:
        properties:
          battery:
            type: integer
          timestamp:
            type: integer
        type: object
      type: array
    MetricsDeviceCPUUsageResponse:
      items:
        properties:
          cpuUsage:
            type: integer
          timestamp:
            type: integer
        type: object
      type: array
    MetricsDeviceDiskIOResponse:
      items:
        properties:
          bytesRead:
            type: integer
          bytesWritten:
            type: integer
          timestamp:
            type: integer
        type: object
      type: array
    MetricsDeviceDiskUsageResponse:
      items:
        properties:
          diskUsage:
            type: integer
          timestamp:
            type: integer
        type: object
      type: array
    MetricsDeviceMemoryResponse:
      items:
        properties:
          memoryUsage:
            type: integer
          timestamp:
            type: integer
        type: object
      type: array
    MetricsDeviceThroughputResponse:
      items:
        properties:
          bytesReceived:
            type: integer
          bytesSent:
            type: integer
          timestamp:
            type: integer
        type: object
      type: array
    MetricsDeviceWifiResponse:
      items:
        properties:
          timestamp:
            type: integer
          wifi:
            type: integer
        type: object
      type: array
    MetricsExpScoreRequest:
      allOf:
        - $ref: "#/components/schemas/RequestBaseTime"
        - $ref: "#/components/schemas/RequestBaseUser"
        - properties:
            appName:
              type: string
            deviceId:
              type: string
    MetricsExpScoreResponse:
      items:
        $ref: "#/components/schemas/ExpScoreMetric"
      type: array
    MetricsNetskopeAllResponse:
      items:
        $ref: "#/components/schemas/NetskopeMetricAll"
      type: array
    MetricsNetskopeTimeSpentResponse:
      items:
        $ref: "#/components/schemas/NetskopeMetricTimeSpent"
      type: array
    MetricsNetworkAllResponse:
      items:
        $ref: "#/components/schemas/NetworkMetricAll"
      type: array
    MetricsNetworkJitterResponse:
      items:
        properties:
          jitter:
            type: integer
          timestamp:
            type: integer
        type: object
      type: array
    MetricsNetworkLatencyResponse:
      items:
        properties:
          latency:
            type: integer
          timestamp:
            type: integer
        type: object
      type: array
    MetricsNetworkPacketLossResponse:
      items:
        properties:
          packetLoss:
            type: integer
          timestamp:
            type: integer
        type: object
      type: array
    NetskopeMetricAll:
      properties:
        timeSpent:
          type: integer
        timestamp:
          type: integer
      type: object
    NetskopeMetricTimeSpent:
      properties:
        timeSpent:
          type: integer
        timestamp:
          type: integer
      type: object
    NetskopeMetricTypeParam:
      properties:
        metricType:
          enum:
            - all
            - time_spent
          type: string
      required:
        - metricType
    NetworkMetricAll:
      properties:
        jitter:
          type: integer
        latency:
          type: integer
        packetLoss:
          type: integer
        timestamp:
          type: integer
      type: object
    NetworkMetricTypeParam:
      properties:
        metricType:
          enum:
            - all
            - latency
            - packet_loss
            - jitter
          type: string
      required:
        - metricType
    POPsResponse:
      properties:
        pops:
          items:
            type: string
          type: array
        totalCount:
          type: integer
      type: object
    RequestAddedFilters:
      properties:
        application:
          type: string
        deviceOs:
          items:
            type: string
          type: array
        expScore:
          items:
            description:
              interval in form "lower,upper" - [lower, upper) or lower
              <= x < upper
            type: string
          type: array
        pop:
          items:
            type: string
          type: array
        sourceIp:
          type: string
        user:
          type: string
        userLocation:
          items:
            $ref: "#/components/schemas/UserLocationFilter"
          type: array
    RequestBaseTime:
      properties:
        endtime:
          type: integer
        starttime:
          type: integer
      required:
        - starttime
        - endtime
    RequestBaseTimestamp:
      properties:
        timestamp:
          type: integer
      required:
        - timestamp
    RequestBaseUser:
      properties:
        user:
          type: string
      required:
        - user
    Traceroute:
      properties:
        device:
          $ref: "#/components/schemas/DeviceTraceroute"
        path:
          items:
            $ref: "#/components/schemas/TracerouteHop"
          type: array
        timestamp:
          type: integer
      type: object
    TracerouteHop:
      properties:
        hopType:
          description: general, hop, app
          type: string
        isNetskopeHop:
          description: true, false
          type: string
        nodes:
          items:
            $ref: "#/components/schemas/TracerouteNode"
          type: array
      type: object
    TracerouteNode:
      properties:
        application:
          type: string
        asn:
          type: string
        category:
          type: string
        domain:
          type: string
        geo:
          description: city, region, country
          type: string
        ip:
          type: string
        ipOrg:
          type: string
        latency:
          type: integer
        nodeHopType:
          type: string
        packetLoss:
          type: integer
        pop:
          type: string
      type: object
    TracerouteResponse:
      items:
        $ref: "#/components/schemas/Traceroute"
      type: array
    UserDetail:
      properties:
        applicationsCount:
          type: integer
        devices:
          items:
            $ref: "#/components/schemas/Device"
          nullable: true
          type: array
        expScore:
          type: integer
        location:
          type: string
        user:
          type: string
        userGroups:
          items:
            type: string
          type: array
      type: object
    UserDetailsDrilldownResponse:
      properties:
        deviceList:
          items:
            $ref: "#/components/schemas/DeviceDrilldown"
          type: array
        expScore:
          type: integer
        lastActivity:
          type: integer
        lastKnownLocation:
          description: city, region, country
          type: string
        organizationUnit:
          type: string
        user:
          type: string
        userGroup:
          type: string
      type: object
    UserDetailsRequest:
      allOf:
        - $ref: "#/components/schemas/RequestBaseTime"
        - $ref: "#/components/schemas/RequestAddedFilters"
    UserDetailsResponse:
      properties:
        totalUsersCount:
          type: integer
        users:
          items:
            $ref: "#/components/schemas/UserDetail"
          type: array
      type: object
    UserLocationFilter:
      properties:
        city:
          type: string
        country:
          type: string
        region:
          type: string
      type: object
    UserlocationsResponse:
      properties:
        totalCount:
          type: integer
        userLocations:
          items:
            $ref: "#/components/schemas/Geo"
          type: array
      type: object
    UsersResponse:
      properties:
        activeDevicesCount:
          type: integer
        activeSitesCount:
          type: integer
        appsAccessedCount:
          type: integer
        appsImpactedCount:
          type: integer
        totalUsersCount:
          type: integer
        userCountPoorExp:
          type: integer
        usersCountAppProbes:
          type: integer
      type: object
info:
  contact:
    email: zquan@netskope.com
  description: API for GET data required for the User Overview UI pages.
  title: Netskope Advanced DEM User Overview Backend Endpoints
  version: 0.0.1
openapi: 3.0.0
paths:
  /adem/deviceoslist:
    get:
      operationId: getDeviceOSs
      parameters:
        - $ref: "#/components/parameters/FilterOptionsRequestStarttime"
        - $ref: "#/components/parameters/FilterOptionsRequestEndtime"
        - $ref: "#/components/parameters/FilterOptionsRequestPrefix"
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                  - Linux
                  - Windows
                items:
                  description: Device OS
                  type: string
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Bad Request
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Internal Server Error
      summary: Get a list of active devices' OSs.
      x-netskope-route-params:
        enableAuditLogging: false
    x-netskope-params:
      apiGroup: adem_backend_api
      customerFacing: true
      serviceConfig: adem-backend-api
      version: 2
  /adem/iplist:
    get:
      operationId: getIpList
      parameters:
        - $ref: "#/components/parameters/FilterOptionsRequestStarttime"
        - $ref: "#/components/parameters/FilterOptionsRequestEndtime"
        - $ref: "#/components/parameters/FilterOptionsRequestPrefix"
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                  - 1.2.3.4
                  - 5.6.7.8
                items:
                  description: Source IP
                  type: string
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Bad Request
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Internal Server Error
      summary: Get a list of active IPs (default and max limit of 1000, sorted by IP).
      x-netskope-route-params:
        enableAuditLogging: false
    x-netskope-params:
      apiGroup: adem_backend_api
      customerFacing: true
      serviceConfig: adem-backend-api
      version: 2
  /adem/poplist:
    get:
      operationId: getPOPs
      parameters:
        - $ref: "#/components/parameters/FilterOptionsRequestStarttime"
        - $ref: "#/components/parameters/FilterOptionsRequestEndtime"
        - $ref: "#/components/parameters/FilterOptionsRequestPrefix"
      responses:
        "200":
          content:
            application/json:
              example:
                pops:
                  - US-NYC1
                  - IN-CCU1
                  - JP-OSA1
                totalCount: 3
              schema:
                $ref: "#/components/schemas/POPsResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Bad Request
        "413":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Content Too Large
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Internal Server Error
      summary: Get a list of POPs used by active users.
      x-netskope-route-params:
        enableAuditLogging: false
    x-netskope-params:
      apiGroup: adem_backend_api
      customerFacing: true
      serviceConfig: adem-backend-api
      version: 2
  /adem/userlist:
    get:
      operationId: getUserList
      parameters:
        - $ref: "#/components/parameters/FilterOptionsRequestStarttime"
        - $ref: "#/components/parameters/FilterOptionsRequestEndtime"
        - $ref: "#/components/parameters/FilterOptionsRequestPrefix"
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                  - user1@netskope.com
                  - user2@netskope.com
                items:
                  description: User email
                  type: string
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Bad Request
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Internal Server Error
      summary: Get a list of active users (default and max limit of 1000, sorted by name).
      x-netskope-route-params:
        enableAuditLogging: false
    x-netskope-params:
      apiGroup: adem_backend_api
      customerFacing: true
      serviceConfig: adem-backend-api
      version: 2
  /adem/users/device/getdetails:
    post:
      operationId: getDeviceDetails
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              deviceId: "70"
              endtime: 1689577200
              starttime: 1689490800
              user: user1@netskope.com
            schema:
              $ref: "#/components/schemas/DeviceDetailsRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                clientStatus: enabled
                clientVersion: 107.1.0
                cpu: intel i7
                deviceClassification: managed
                deviceName: Macbook 1
                deviceOs: Mac OS 10
                deviceScore: 90
                gateway: gateway1.goskope.com
                geo:
                  city: New York
                  country: USA
                  latitude: 40.7128
                  longitude: -74.006
                  region: NY
                lastActivity: 1687850803
                memory: 8GB
                model: Pro
                pop: HK-HKG1
                privateIp: 1.2.3.4
                publicIp: 5.6.7.8
              schema:
                $ref: "#/components/schemas/DeviceDetailsDrilldownResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Bad Request
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Internal Server Error
      summary: Get a user's device's details.
      x-netskope-route-params:
        enableAuditLogging: false
    x-netskope-params:
      apiGroup: adem_backend_api
      customerFacing: true
      serviceConfig: adem-backend-api
      version: 2
  /adem/users/device/getlist:
    post:
      operationId: getDeviceList
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/DeviceListRequest"
              example:
                endtime: 1689577200
                starttime: 1689490800
                user: user1@netskope.com
                userLocation:
                  - city: San Francisco
                    country: USA
                    region: CA
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                - deviceId: "1234"
                  deviceName: device1
                  deviceOs: Linux
                - deviceId: "5678"
                  deviceName: device2
                  deviceOs: Windows
              schema:
                items:
                  $ref: "#/components/schemas/DeviceDrilldown"
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Bad Request
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Internal Server Error
      summary: Get a user's accessed devices.
      x-netskope-route-params:
        enableAuditLogging: false
    x-netskope-params:
      apiGroup: adem_backend_api
      customerFacing: true
      serviceConfig: adem-backend-api
      version: 2
  /adem/users/getapplications:
    post:
      operationId: getApplications
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/FilterOptionsRequest"
                - properties:
                    deviceId:
                      type: string
                    user:
                      type: string
                    userLocation:
                      items:
                        $ref: "#/components/schemas/UserLocationFilter"
                      type: array
              example:
                deviceId: "70"
                endtime: 1689577200
                prefix: Gma
                starttime: 1689490800
                user: user1@netskope.com
                userLocation:
                  - city: San Francisco
                    country: USA
                    region: CA
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                applications:
                  - appName: App_1
                    expScore: 80
                  - appName: App_2
                    expScore: 60
                totalCount: 2
              schema:
                $ref: "#/components/schemas/ApplicationsResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Bad Request
        "413":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Content Too Large
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Internal Server Error
      summary: Get a list of applications used by active users, with scores when available.
      x-netskope-route-params:
        enableAuditLogging: false
    x-netskope-params:
      apiGroup: adem_backend_api
      customerFacing: true
      serviceConfig: adem-backend-api
      version: 2
  /adem/users/getentities:
    post:
      operationId: getUserDetails
      parameters:
        - $ref: "#/components/parameters/OptionalPaginationParamsLimit"
        - $ref: "#/components/parameters/OptionalPaginationParamsOffset"
        - $ref: "#/components/parameters/OptionalPaginationParamsSortBy"
        - $ref: "#/components/parameters/OptionalPaginationParamsSortOrder"
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UserDetailsRequest"
              example:
                application: Gmail
                deviceOs:
                  - Linux
                endtime: 1689577200
                expScore:
                  - 31~70
                pop:
                  - LAX1
                sourceIp: 192.168.0.1
                starttime: 1689490800
                user: user1@netskope.com
                userLocation:
                  - city: San Francisco
                    country: USA
                    region: CA
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                totalUsersCount: 2
                users:
                  - applicationsCount: 12
                    devices:
                      - deviceClassification: Managed
                        deviceName: device1
                      - deviceClassification: Unmanaged
                        deviceName: device2
                    expScore: 16
                    location: New York,NY,USA
                    user: user1@netskope.com
                    userGroups:
                      - userGroup1
                      - userGroup2
                  - applicationsCount: 30
                    devices: null
                    expScore: 16
                    location: San Francisco,CA,USA
                    user: user2@netskope.com
                    userGroups:
                      - userGroup3
                      - userGroup4
              schema:
                $ref: "#/components/schemas/UserDetailsResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Bad Request
        "413":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Content Too Large
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Internal Server Error
      summary: Get a list of users with user specific data (default and max limit of 100, sorted by user score, asc or desc).
      x-netskope-route-params:
        enableAuditLogging: false
    x-netskope-params:
      apiGroup: adem_backend_api
      customerFacing: true
      serviceConfig: adem-backend-api
      version: 2
  /adem/users/getevents:
    post:
      operationId: getEvents
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/DeviceDetailsRequest"
                - $ref: "#/components/schemas/EventTypeParam"
              example:
                deviceId: "20"
                endtime: 1689577200
                eventType: all
                starttime: 1689490800
                user: user1@netskope.com
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                - event: Wifi connect
                  eventType: network
                  timestamp: 1687850103
                - event: Shutdown
                  eventType: device
                  timestamp: 1687830803
              schema:
                items:
                  $ref: "#/components/schemas/Event"
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Bad Request
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Internal Server Error
      summary: Get a user's device's device and network events.
      x-netskope-route-params:
        enableAuditLogging: false
    x-netskope-params:
      apiGroup: adem_backend_api
      customerFacing: true
      serviceConfig: adem-backend-api
      version: 2
  /adem/users/getgeometrics:
    post:
      operationId: getLocations
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/GlobalFiltersRequest"
              example:
                application: Gmail
                deviceOs:
                  - Linux
                  - Windows
                endtime: 1689577200
                expScore:
                  - 31~70
                pop:
                  - SEA1
                  - LAX1
                sourceIp: 192.168.0.1
                starttime: 1689490800
                user: user1@netskope.com
                userLocation:
                  - city: San Francisco
                    country: USA
                    region: CA
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                - avgExpScore: 56.98
                  geo:
                    city: New York
                    country: USA
                    latitude: 40.7128
                    longitude: -74.006
                    region: NY
                  totalUsersCount: 102
                  userCountGoodExp: 12
                  userCountMediumExp: 30
                  userCountPoorExp: 60
                - avgExpScore: 98.34
                  geo:
                    city: San Francisco
                    country: USA
                    latitude: 37.7739
                    longitude: -122.4312
                    region: CA
                  totalUsersCount: 249
                  userCountGoodExp: 53
                  userCountMediumExp: 91
                  userCountPoorExp: 105
              schema:
                $ref: "#/components/schemas/LocationsResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Bad Request
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Internal Server Error
      summary: Get locations with aggregate user data.
      x-netskope-route-params:
        enableAuditLogging: false
    x-netskope-params:
      apiGroup: adem_backend_api
      customerFacing: true
      serviceConfig: adem-backend-api
      version: 2
  /adem/users/getinfo:
    post:
      operationId: getUserDrilldown
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/RequestBaseTime"
                - properties:
                    user:
                      type: string
              example:
                endtime: 1689577200
                starttime: 1689490800
                user: user1@netskope.net
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                deviceList:
                  - deviceId: "1234"
                    deviceName: device1
                    deviceOs: Linux
                  - deviceId: "5678"
                    deviceName: device2
                    deviceOs: Windows
                expScore: 10
                lastActivity: 1687850103
                lastKnownLocation: New York,NY,USA
                organizationUnit: Engineering
                user: user1@netskope.com
                userGroup: userGroup1
              schema:
                $ref: "#/components/schemas/UserDetailsDrilldownResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Bad Request
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Internal Server Error
      summary: Get latest drilldown details on one user.
      x-netskope-route-params:
        enableAuditLogging: false
    x-netskope-params:
      apiGroup: adem_backend_api
      customerFacing: true
      serviceConfig: adem-backend-api
      version: 2
  /adem/users/getlocations:
    post:
      operationId: getUserLocations
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              endtime: 1689577200
              prefix: New
              starttime: 1689490800
              user: user1@netskope.com
            schema:
              allOf:
                - $ref: "#/components/schemas/FilterOptionsRequest"
                - properties:
                    user:
                      type: string
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                totalCount: 2
                userLocations:
                  - city: New York
                    country: USA
                    latitude: 40.7128
                    longitude: -74.006
                    region: NY
                  - city: San Francisco
                    country: USA
                    latitude: 37.7739
                    longitude: -122.4312
                    region: CA
              schema:
                $ref: "#/components/schemas/UserlocationsResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Bad Request
        "413":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Content Too Large
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Internal Server Error
      summary: Get a list of active users' locations.
      x-netskope-route-params:
        enableAuditLogging: false
    x-netskope-params:
      apiGroup: adem_backend_api
      customerFacing: true
      serviceConfig: adem-backend-api
      version: 2
  /adem/users/getsummary:
    post:
      operationId: getUsers
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              application: Gmail
              deviceOs:
                - Linux
              endtime: 1689577200
              expScore:
                - 31~70
              pop:
                - LAX1
              sourceIp: 192.168.0.1
              starttime: 1689490800
              user: user1@netskope.com
              userLocation:
                - city: San Francisco
                  country: USA
                  region: CA
            schema:
              $ref: "#/components/schemas/GlobalFiltersRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                activeDevicesCount: 12
                activeSitesCount: 30
                appsAccessedCount: 60
                appsImpactedCount: 53
                totalUsersCount: 91
                userCountPoorExp: 53
                usersCountAppProbes: 60
              schema:
                $ref: "#/components/schemas/UsersResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Bad Request
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Internal Server Error
      summary: Get a summary of aggregate user data.
      x-netskope-route-params:
        enableAuditLogging: false
    x-netskope-params:
      apiGroup: adem_backend_api
      customerFacing: true
      serviceConfig: adem-backend-api
      version: 2
  /adem/users/gettraceroute:
    post:
      operationId: getTraceroute
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              appName: App_1
              deviceId: "10"
              endtime: 1689577200
              starttime: 1689490800
              user: user1@netskope.com
            schema:
              allOf:
                - $ref: "#/components/schemas/DeviceDetailsRequest"
                - properties:
                    appName:
                      type: string
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                - device:
                    deviceClassification: sanctioned
                    deviceName: device1
                    geo:
                      city: New York
                      country: USA
                      latitude: 40.7128
                      longitude: -74.006
                      region: NY
                    model: Pro
                    privateIp: 1.2.3.4
                    publicIp: 5.6.7.8
                  path:
                    - hopType: general
                      isNetskopeHop: "false"
                      nodes:
                        - application: Office
                          asn: asn1
                          category: appCategory1
                          domain: domain1
                          geo: New York,NY,USA
                          ip: 1.2.3.4
                          ipOrg: ipOrg1
                          latency: 10
                          packetLoss: 10
                          pop: US-NYC1
                        - application: Chrome
                          asn: asn2
                          category: appCategory2
                          domain: domain2
                          geo: San Francisco,CA,USA
                          ip: 5.6.7.8
                          ipOrg: ipOrg2
                          latency: 40
                          packetLoss: 20
                          pop: IN-CCU1
                        - application: Mail
                          asn: asn3
                          category: appCategory3
                          domain: domain3
                          geo: Boston,MA,USA
                          ip: 9.10.11.12
                          ipOrg: ipOrg3
                          latency: 4
                          packetLoss: 30
                          pop: JP-OSA1
                    - hopType: hop
                      isNetskopeHop: "false"
                      nodes:
                        - application: Office
                          asn: asn1
                          category: appCategory1
                          domain: domain1
                          geo: New York,NY,USA
                          ip: 1.2.3.4
                          ipOrg: ipOrg1
                          latency: 10
                          packetLoss: 10
                          pop: US-NYC1
                        - application: Chrome
                          asn: asn2
                          category: appCategory2
                          domain: domain2
                          geo: San Francisco,CA,USA
                          ip: 5.6.7.8
                          ipOrg: ipOrg2
                          latency: 40
                          packetLoss: 20
                          pop: IN-CCU1
                        - application: Mail
                          asn: asn3
                          category: appCategory3
                          domain: domain3
                          geo: Boston,MA,USA
                          ip: 9.10.11.12
                          ipOrg: ipOrg3
                          latency: 4
                          packetLoss: 30
                          pop: JP-OSA1
                    - hopType: app
                      isNetskopeHop: "true"
                      nodes:
                        - application: Office
                          asn: asn1
                          category: appCategory1
                          domain: domain1
                          geo: New York,NY,USA
                          ip: 1.2.3.4
                          ipOrg: ipOrg1
                          latency: 10
                          packetLoss: 10
                          pop: US-NYC1
                        - application: Chrome
                          asn: asn2
                          category: appCategory2
                          domain: domain2
                          geo: San Francisco,CA,USA
                          ip: 5.6.7.8
                          ipOrg: ipOrg2
                          latency: 40
                          packetLoss: 20
                          pop: IN-CCU1
                        - application: Mail
                          asn: asn3
                          category: appCategory3
                          domain: domain3
                          geo: Boston,MA,USA
                          ip: 9.10.11.12
                          ipOrg: ipOrg3
                          latency: 4
                          packetLoss: 30
                          pop: JP-OSA1
                  timestamp: 1687850103
                - device:
                    deviceClassification: unsanctioned
                    deviceName: device2
                    geo:
                      city: San Francisco
                      country: USA
                      latitude: 37.7739
                      longitude: -122.4312
                      region: CA
                    model: Plus
                    privateIp: 5.6.7.8
                    publicIp: 9.10.11.12
                  path:
                    - hopType: general
                      isNetskopeHop: "false"
                      nodes:
                        - application: Office
                          asn: asn1
                          category: appCategory1
                          domain: domain1
                          geo: New York,NY,USA
                          ip: 1.2.3.4
                          ipOrg: ipOrg1
                          latency: 10
                          packetLoss: 10
                          pop: US-NYC1
                        - application: Chrome
                          asn: asn2
                          category: appCategory2
                          domain: domain2
                          geo: San Francisco,CA,USA
                          ip: 5.6.7.8
                          ipOrg: ipOrg2
                          latency: 40
                          packetLoss: 20
                          pop: IN-CCU1
                        - application: Mail
                          asn: asn3
                          category: appCategory3
                          domain: domain3
                          geo: Boston,MA,USA
                          ip: 9.10.11.12
                          ipOrg: ipOrg3
                          latency: 4
                          packetLoss: 30
                          pop: JP-OSA1
                    - hopType: hop
                      isNetskopeHop: "false"
                      nodes:
                        - application: Office
                          asn: asn1
                          category: appCategory1
                          domain: domain1
                          geo: New York,NY,USA
                          ip: 1.2.3.4
                          ipOrg: ipOrg1
                          latency: 10
                          packetLoss: 10
                          pop: US-NYC1
                        - application: Chrome
                          asn: asn2
                          category: appCategory2
                          domain: domain2
                          geo: San Francisco,CA,USA
                          ip: 5.6.7.8
                          ipOrg: ipOrg2
                          latency: 40
                          packetLoss: 20
                          pop: IN-CCU1
                        - application: Mail
                          asn: asn3
                          category: appCategory3
                          domain: domain3
                          geo: Boston,MA,USA
                          ip: 9.10.11.12
                          ipOrg: ipOrg3
                          latency: 4
                          packetLoss: 30
                          pop: JP-OSA1
                    - hopType: hop
                      isNetskopeHop: "true"
                      nodes:
                        - application: Office
                          asn: asn1
                          category: appCategory1
                          domain: domain1
                          geo: New York,NY,USA
                          ip: 1.2.3.4
                          ipOrg: ipOrg1
                          latency: 10
                          packetLoss: 10
                          pop: US-NYC1
                        - application: Chrome
                          asn: asn2
                          category: appCategory2
                          domain: domain2
                          geo: San Francisco,CA,USA
                          ip: 5.6.7.8
                          ipOrg: ipOrg2
                          latency: 40
                          packetLoss: 20
                          pop: IN-CCU1
                        - application: Mail
                          asn: asn3
                          category: appCategory3
                          domain: domain3
                          geo: Boston,MA,USA
                          ip: 9.10.11.12
                          ipOrg: ipOrg3
                          latency: 4
                          packetLoss: 30
                          pop: JP-OSA1
                  timestamp: 1687830803
              schema:
                $ref: "#/components/schemas/TracerouteResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Bad Request
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Internal Server Error
      summary: Get a user's device's traceroutes.
      x-netskope-route-params:
        enableAuditLogging: false
    x-netskope-params:
      apiGroup: adem_backend_api
      customerFacing: true
      serviceConfig: adem-backend-api
      version: 2
  /adem/users/metrics/device/getprocessinfo:
    post:
      operationId: getProcessInfo
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/RequestBaseTimestamp"
                - $ref: "#/components/schemas/DeviceDetailsParams"
              example:
                deviceId: "20"
                timestamp: 1689577200
                user: user1@netskope.com
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                cpuUsage:
                  processInfo:
                    - cpuUsage: 10
                      processId: 500
                      processName: process1
                      threadCount: 40
                    - cpuUsage: 50
                      processId: 2000
                      processName: process2
                      threadCount: 3
                  totalCount: 2
                diskIOUsage:
                  processInfo:
                    - bytesRead: 10
                      bytesWritten: 10
                      processId: 5000
                      processName: process5
                  totalCount: 1
                memoryUsage:
                  processInfo:
                    - memoryUsage: 10
                      processId: 1000
                      processName: process3
                      threadCount: 2
                  totalCount: 1
              schema:
                $ref: "#/components/schemas/DeviceProcessInfoResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Bad Request
        "413":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Content Too Large
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Internal Server Error
      summary: Get a user's device's process level resource usage time series metrics.
      x-netskope-route-params:
        enableAuditLogging: false
    x-netskope-params:
      apiGroup: adem_backend_api
      customerFacing: true
      serviceConfig: adem-backend-api
      version: 2
  /adem/users/metrics/getapplication:
    post:
      operationId: getApplicationMetrics
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/RequestBaseTime"
                - $ref: "#/components/schemas/ApplicationDetailsParams"
                - $ref: "#/components/schemas/ApplicationMetricTypeParam"
              example:
                appName: App_1
                deviceId: "10"
                endtime: 1689577200
                metricType: all
                starttime: 1689490800
                user: user1@netskope.com
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                  - roundTripTime: 89
                    timestamp: 1687857848
                  - roundTripTime: 130
                    timestamp: 1687858148
                  - roundTripTime: 210
                    timestamp: 1687858448
                oneOf:
                  - $ref: "#/components/schemas/MetricsApplicationAllResponse"
                  - $ref: "#/components/schemas/MetricsApplicationRoundTripTimeResponse"
                  - $ref: "#/components/schemas/MetricsApplicationE2ELatencyResponse"
                  - $ref: "#/components/schemas/MetricsApplicationFirstByteResponse"
                  - $ref: "#/components/schemas/MetricsApplicationLastByteResponse"
                  - $ref: "#/components/schemas/MetricsApplicationDNSResolutionResponse"
                  - $ref: "#/components/schemas/MetricsApplicationTCPConnectResponse"
                  - $ref: "#/components/schemas/MetricsApplicationTLSNegotiationResponse"
                  - $ref: "#/components/schemas/MetricsApplicationWaitResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Bad Request
        "413":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Content Too Large
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Internal Server Error
      summary: Get a user's device's application's round-trip-time time series metrics.
      x-netskope-route-params:
        enableAuditLogging: false
    x-netskope-params:
      apiGroup: adem_backend_api
      customerFacing: true
      serviceConfig: adem-backend-api
      version: 2
  /adem/users/metrics/getdevice:
    post:
      operationId: getDeviceMetrics
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/DeviceDetailsRequest"
                - $ref: "#/components/schemas/DeviceMetricTypeParam"
              example:
                deviceId: "10"
                endtime: 1689577200
                metricType: all
                starttime: 1689490800
                user: user1@netskope.com
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                  - battery: 10
                    bytesRead: 40
                    bytesReceived: 4
                    bytesSent: 8
                    bytesWritten: 300
                    cpuUsage: 20
                    diskUsage: 30
                    memoryUsage: 40
                    timestamp: 1687857848
                    wifi: 50
                  - battery: 10
                    bytesRead: 40
                    bytesReceived: 4
                    bytesSent: 8
                    bytesWritten: 300
                    cpuUsage: 20
                    diskUsage: 30
                    memoryUsage: 40
                    timestamp: 1687858148
                    wifi: 60
                  - battery: 10
                    bytesRead: 40
                    bytesReceived: 4
                    bytesSent: 8
                    bytesWritten: 300
                    cpuUsage: 20
                    diskUsage: 30
                    memoryUsage: 40
                    timestamp: 1687858448
                    wifi: 70
                oneOf:
                  - $ref: "#/components/schemas/MetricsDeviceAllResponse"
                  - $ref: "#/components/schemas/MetricsDeviceCPUUsageResponse"
                  - $ref: "#/components/schemas/MetricsDeviceMemoryResponse"
                  - $ref: "#/components/schemas/MetricsDeviceDiskUsageResponse"
                  - $ref: "#/components/schemas/MetricsDeviceThroughputResponse"
                  - $ref: "#/components/schemas/MetricsDeviceDiskIOResponse"
                  - $ref: "#/components/schemas/MetricsDeviceBatteryResponse"
                  - $ref: "#/components/schemas/MetricsDeviceWifiResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Bad Request
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Internal Server Error
      summary: Get a user's device's health and resource usage time series metrics.
      x-netskope-route-params:
        enableAuditLogging: false
    x-netskope-params:
      apiGroup: adem_backend_api
      customerFacing: true
      serviceConfig: adem-backend-api
      version: 2
  /adem/users/metrics/getexpscore:
    post:
      operationId: getExpScore
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/MetricsExpScoreRequest"
              example:
                appName: App_1
                deviceId: "100"
                endtime: 1689577200
                starttime: 1689490800
                user: user1@netskope.com
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                - expScore: 16
                  timestamp: 1687857848
                - expScore: 17
                  timestamp: 1687858148
                - expScore: 18
                  timestamp: 1687858448
              schema:
                $ref: "#/components/schemas/MetricsExpScoreResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Bad Request
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Internal Server Error
      summary: Get a user's user/device/app experience score time series metrics.
      x-netskope-route-params:
        enableAuditLogging: false
    x-netskope-params:
      apiGroup: adem_backend_api
      customerFacing: true
      serviceConfig: adem-backend-api
      version: 2
  /adem/users/metrics/getnetskopeprocessingtime:
    post:
      operationId: getNetskopeMetrics
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/DeviceDetailsRequest"
                - $ref: "#/components/schemas/NetskopeMetricTypeParam"
              example:
                deviceId: abc-xyz
                endtime: 1689577200
                metricType: all
                starttime: 1689490800
                user: user1@netskope.com
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                  - timeSpent: 89
                    timestamp: 1687857848
                  - timeSpent: 130
                    timestamp: 1687858148
                  - timeSpent: 210
                    timestamp: 1687858448
                oneOf:
                  - $ref: "#/components/schemas/MetricsNetskopeAllResponse"
                  - $ref: "#/components/schemas/MetricsNetskopeTimeSpentResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Bad Request
        "413":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Content Too Large
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Internal Server Error
      summary: Get a user's device's last connected Netskope POP's processing-time time series metrics.
      x-netskope-route-params:
        enableAuditLogging: false
    x-netskope-params:
      apiGroup: adem_backend_api
      customerFacing: true
      serviceConfig: adem-backend-api
      version: 2
  /adem/users/metrics/getnetwork:
    post:
      operationId: getNetworkMetrics
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/DeviceDetailsRequest"
                - $ref: "#/components/schemas/NetworkMetricTypeParam"
              example:
                deviceId: "30"
                endtime: 1689577200
                metricType: all
                starttime: 1689490800
                user: user1@netskope.com
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                  - jitter: 40
                    latency: 10
                    packetLoss: 6
                    timestamp: 1687857848
                  - jitter: 8
                    latency: 4
                    packetLoss: 1
                    timestamp: 1687858148
                  - jitter: 400
                    latency: 300
                    packetLoss: 0
                    timestamp: 1687858448
                oneOf:
                  - $ref: "#/components/schemas/MetricsNetworkAllResponse"
                  - $ref: "#/components/schemas/MetricsNetworkLatencyResponse"
                  - $ref: "#/components/schemas/MetricsNetworkPacketLossResponse"
                  - $ref: "#/components/schemas/MetricsNetworkJitterResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Bad Request
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Internal Server Error
      summary: Get a user's device's network time series metrics.
      x-netskope-route-params:
        enableAuditLogging: false
    x-netskope-params:
      apiGroup: adem_backend_api
      customerFacing: true
      serviceConfig: adem-backend-api
      version: 2
